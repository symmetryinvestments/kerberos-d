module krb5.kerberosgss;
version(linux):
/**
 * Adopted from PyKerberos. Modified for use with Kerby.
 *
 * Copyright (c) 2006-2015 Apple Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

import std.string : toStringz, fromStringz;
import std.exception : enforce;
import std.conv : octal;
import std.base64 : Base64;

#include <errno.h>
#include <unistd.h> // for close
#include <gssapi/gssapi.h>
#include <gssapi/gssapi_generic.h>
#include <gssapi/gssapi_krb5.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


/* Major status codes */

//enum GSS_S_COMPLETE =0;


/*
 * Expiration time of 2^32-1 seconds means infinite lifetime for a
 * credential or security context
 */
enum GSS_Indefinite = cast(OM_uint32) 0xffffffffUL;


/*
 * Some "helper" definitions to make the status code macros obvious.
 */
enum GSS_CallingErrorOffset = 24;
enum GSS_RoutineErrorOffset = 16;
enum GSS_SupplementaryOffset = 0;
enum GSS_CallingErrorMask = (cast (OM_uint32) octal!377UL);
enum GSS_RoutineErrorMask = (cast (OM_uint32) octal!377UL);
enum GSS_SupplementaryMask = (cast (OM_uint32) octal!177777UL);

/*
 * The macros that test status codes for error conditions.  Note that the
 * GSS_ERROR() macro has changed slightly from the V1 GSSAPI so that it now
 * evaluates its argument only once.
 */
auto GSS_callingError(uint x)
{
  return ((x) & (GSS_CallingErrorMask << GSS_CallingErrorOffset));
}

auto GSS_routineError(uint x)
{
  return ((x) & (GSS_RoutineErrorMask << GSS_RoutineErrorOffset));
}

auto GSS_supplementaryInfo(uint x)
{
	return ((x) & (GSS_SupplementaryMask << GSS_SupplementaryOffset));
}

auto GSS_error(uint x)
{
  return GSS_callingError(x) | GSS_routineError(x);
}

auto krb5_get_err_text(T,U)(T context,U code)
{
	return error_message(code);
}


enum AUTH_GSS_ERROR      = -1;
enum AUTH_GSS_COMPLETE    = 1;
enum AUTH_GSS_CONTINUE    = 0;

enum AuthStatus
{
	error = AUTH_GSS_ERROR,
	complete = AUTH_GSS_COMPLETE,
	continue_ = AUTH_GSS_CONTINUE,
}

enum GSS_AUTH_P_NONE        = 1;
enum GSS_AUTH_P_INTEGRITY    = 2 ;
enum GSS_AUTH_P_PRIVACY     = 4;
enum GSS_ERRBUF_SIZE        = 512;

struct gss_client_state
{
    gss_ctx_id_t     context;
    gss_name_t       server_name;
    long 			gss_flags;
    gss_cred_id_t    client_creds;
    char*            username;
    char*            response;
    int              responseConf;
    OM_uint32        maj_stat;
    OM_uint32        min_stat;

	static auto init(string service, string principal, long gss_flags, gss_server_state* delegatestate)
	{
		import std.typecons : tuple;
		gss_client_state state;
		gss_buffer_desc name_token = GSS_C_EMPTY_BUFFER;
		gss_buffer_desc principal_token = GSS_C_EMPTY_BUFFER;
		AuthStatus ret = AuthStatus.complete;
		
		state.server_name = GSS_C_NO_NAME;
		state.context = GSS_C_NO_CONTEXT;
		state.gss_flags = gss_flags;
		state.client_creds = GSS_C_NO_CREDENTIAL;
		state.username = null;
		state.response = null;
		
		// Import server name first
		name_token.length = service.length;
		name_token.value = cast(void*) service.toStringz;
		
		state.maj_stat = gss_import_name(
			&state.min_stat, &name_token, gss_krb5_nt_service_name, &state.server_name
		);
		
		if (GSS_error(state.maj_stat)) {
			ret = AuthStatus.error;
			goto end;
		}
		// Use the delegate credentials if they exist
		if (delegatestate && delegatestate.client_creds != GSS_C_NO_CREDENTIAL) {
			state.client_creds = delegatestate.client_creds;
		}
		// If available use the principal to extract its associated credentials
		else if (principal.length > 0) {
			gss_name_t name;
			principal_token.length = principal.length;
			principal_token.value = cast(void*) principal.toStringz;

			state.maj_stat = gss_import_name(
				&state.min_stat, &principal_token, GSS_C_NT_USER_NAME, &name
			);
			if (GSS_error(state.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}

			state.maj_stat = gss_acquire_cred(
				&state.min_stat, name, GSS_Indefinite, GSS_C_NO_OID_SET,
				GSS_C_INITIATE, &state.client_creds, null, null
			);
			if (GSS_error(state.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}

			state.maj_stat = gss_release_name(&state.min_stat, &name);
			if (GSS_error(state.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}
		}

	end:
		return tuple(ret,state);
	}

	AuthStatus clean()
	{
		OM_uint32 maj_stat;
		OM_uint32 min_stat;
		AuthStatus ret = AuthStatus.complete;
		
		if (this.context != GSS_C_NO_CONTEXT) {
			maj_stat = gss_delete_sec_context( &min_stat, &this.context, GSS_C_NO_BUFFER
			);
		}
		if (this.server_name != GSS_C_NO_NAME) {
			maj_stat = gss_release_name(&min_stat, &this.server_name);
		}
		if (
			this.client_creds != GSS_C_NO_CREDENTIAL &&
			! (this.gss_flags & GSS_C_DELEG_FLAG)
		) {
			maj_stat = gss_release_cred(&min_stat, &this.client_creds);
		}
		if (this.username != null) {
			free(this.username);
			this.username = null;
		}
		if (this.response != null) {
			free(this.response);
			this.response = null;
		}
		
		return ret;
	}

	AuthStatus step(string challenge)
	{
		gss_buffer_desc input_token = GSS_C_EMPTY_BUFFER;
		gss_buffer_desc output_token = GSS_C_EMPTY_BUFFER;
		AuthStatus ret = AuthStatus.continue_;
		
		// Always clear out the old response
		if (this.response != null) {
			free(this.response);
			this.response = null;
		}
		
		// If there is a challenge (data from the server) we need to give it to GSS
		if (challenge.length > 0)
		{
			auto encoded = Base64.decode(challenge).idup;
			input_token.value = cast(void*) encoded.ptr;
			input_token.length = encoded.length;
		}
		
		// Do GSSAPI step
		this.maj_stat = gss_init_sec_context(
			&this.min_stat,
			this.client_creds,
			&this.context,
			this.server_name,
			GSS_C_NO_OID,
			cast(OM_uint32)this.gss_flags,
			0,
			GSS_C_NO_CHANNEL_BINDINGS,
			&input_token,
			null,
			&output_token,
			null,
			null
		);
		
		if ((this.maj_stat != GSS_S_COMPLETE) && (this.maj_stat != GSS_S_CONTINUE_NEEDED)) {
			ret = AuthStatus.error;
			goto end;
		}
		
		ret = (this.maj_stat == GSS_S_COMPLETE) ? AuthStatus.complete : AuthStatus.continue_;
		// Grab the client response to send back to the server
		if (output_token.length) {
			this.response = cast(char*)((cast(string)(Base64.encode((cast(const(ubyte)*)output_token.value)[0..output_token.length]).idup)).toStringz);
			this.maj_stat = gss_release_buffer(&this.min_stat, &output_token);
		}
		
		// Try to get the user name if we have completed all GSS operations
		if (ret == AUTH_GSS_COMPLETE) {
			gss_name_t gssuser = GSS_C_NO_NAME;
			this.maj_stat = gss_inquire_context(&this.min_stat, this.context, &gssuser, null, null, null,  null, null, null);
			if (GSS_error(this.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}
			
			gss_buffer_desc name_token;
			name_token.length = 0;
			this.maj_stat = gss_display_name(&this.min_stat, gssuser, &name_token, null);
			if (GSS_error(this.maj_stat)) {
				if (name_token.value)
					gss_release_buffer(&this.min_stat, &name_token);
				gss_release_name(&this.min_stat, &gssuser);
				
				ret = AuthStatus.error;
				goto end;
			} else {
				this.username = cast(char *)malloc(name_token.length + 1);
				strncpy(this.username, cast(char*) name_token.value, name_token.length);
				this.username[name_token.length] = 0;
				gss_release_buffer(&this.min_stat, &name_token);
				gss_release_name(&this.min_stat, &gssuser);
			}
		}

	end:
		if (output_token.value) {
			gss_release_buffer(&this.min_stat, &output_token);
		}
		if (input_token.value) {
			free(input_token.value);
		}
		return ret;
	}
}

struct gss_server_state
{
    gss_ctx_id_t     context;
    gss_name_t       server_name;
    gss_name_t       client_name;
    gss_cred_id_t    server_creds;
    gss_cred_id_t    client_creds;
    char*            username;
    char*            targetname;
    char*            response;
    char*            ccname;
    OM_uint32        maj_stat;
    OM_uint32        min_stat;

	static auto init(string service)
	{
		import std.typecons : tuple;
		gss_server_state state;
		gss_buffer_desc name_token = GSS_C_EMPTY_BUFFER;
		AuthStatus ret = AuthStatus.complete;
		
		state.context = GSS_C_NO_CONTEXT;
		state.server_name = GSS_C_NO_NAME;
		state.client_name = GSS_C_NO_NAME;
		state.server_creds = GSS_C_NO_CREDENTIAL;
		state.client_creds = GSS_C_NO_CREDENTIAL;
		state.username = null;
		state.targetname = null;
		state.response = null;
		state.ccname = null;
		
		// Server name may be empty which means we aren't going to create our own creds
		size_t service_len = service.length;
		if (service_len != 0) {
			// Import server name first
			name_token.length = service.length;
			name_token.value = cast(void*) service.toStringz;
			state.maj_stat = gss_import_name(
				&state.min_stat, &name_token, GSS_C_NT_HOSTBASED_SERVICE,
				&state.server_name
			);
			
			if (GSS_error(state.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}

			// Get credentials
			state.maj_stat = gss_acquire_cred(
				&state.min_stat, GSS_C_NO_NAME, GSS_Indefinite, GSS_C_NO_OID_SET,
				GSS_C_BOTH, &state.server_creds, null, null
			);

			if (GSS_error(state.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}
		}
		
	end:
		return tuple(ret,state);
	}

	AuthStatus clean()
	{
		AuthStatus ret = AuthStatus.complete;
		
		if (this.context != GSS_C_NO_CONTEXT) {
			this.maj_stat = gss_delete_sec_context(
				&this.min_stat, &this.context, GSS_C_NO_BUFFER
			);
		}
		if (this.server_name != GSS_C_NO_NAME) {
			this.maj_stat = gss_release_name(&this.min_stat, &this.server_name);
		}
		if (this.client_name != GSS_C_NO_NAME) {
			this.maj_stat = gss_release_name(&this.min_stat, &this.client_name);
		}
		if (this.server_creds != GSS_C_NO_CREDENTIAL) {
			this.maj_stat = gss_release_cred(&this.min_stat, &this.server_creds);
		}
		if (this.client_creds != GSS_C_NO_CREDENTIAL) {
			this.maj_stat = gss_release_cred(&this.min_stat, &this.client_creds);
		}
		if (this.username != null) {
			free(this.username);
			this.username = null;
		}
		if (this.targetname != null) {
			free(this.targetname);
			this.targetname = null;
		}
		if (this.response != null) {
			free(this.response);
			this.response = null;
		}
		if (this.ccname != null) {
			free(this.ccname);
			this.ccname = null;
		}
		
		return ret;
	}

	AuthStatus step(string challenge)
	{
		gss_buffer_desc input_token = GSS_C_EMPTY_BUFFER;
		gss_buffer_desc output_token = GSS_C_EMPTY_BUFFER;
		AuthStatus ret = AuthStatus.continue_;
		
		// Always clear out the old response
		if (this.response != null) {
			free(this.response);
			this.response = null;
		}
		
		// If there is a challenge (data from the server) we need to give it to GSS
		if (challenge.length > 0)
		{
			auto decoded = Base64.decode(challenge);
			input_token.value = cast(char*) decoded.idup;
			input_token.length = decoded.length;
		} else
		{
			// XXX No challenge parameter in request from client
			// XXX How to pass error string to state? 
			ret = AuthStatus.error;
			goto end;
		}
		
		this.maj_stat = gss_accept_sec_context(
			&this.min_stat,
			&this.context,
			this.server_creds,
			&input_token,
			GSS_C_NO_CHANNEL_BINDINGS,
			&this.client_name,
			null,
			&output_token,
			null,
			null,
			&this.client_creds
		);
		
		if (GSS_error(this.maj_stat)) {
			ret = AuthStatus.error;
			goto end;
		}
		
		// Grab the server response to send back to the client
		if (output_token.length) {
			auto encoded = Base64.encode((cast(const(ubyte) *)output_token.value)[0..output_token.length]);
			this.response = cast(char*)encoded.idup;
			this.maj_stat = gss_release_buffer(&this.min_stat, &output_token);
		}
		
		// Get the user name
		this.maj_stat = gss_display_name(
			&this.min_stat, this.client_name, &output_token, null
		);
		if (GSS_error(this.maj_stat)) {
			ret = AuthStatus.error;
			goto end;
		}
		this.username = cast(char *)malloc(output_token.length + 1);
		strncpy(this.username, cast(char*) output_token.value, output_token.length);
		this.username[output_token.length] = 0;
		
		// Get the target name if no server creds were supplied
		if (this.server_creds == GSS_C_NO_CREDENTIAL) {
			gss_name_t target_name = GSS_C_NO_NAME;
			this.maj_stat = gss_inquire_context(
				&this.min_stat, this.context, null, &target_name, null, null, null,
				null, null
			);
			if (GSS_error(this.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}
			this.maj_stat = gss_display_name(
				&this.min_stat, target_name, &output_token, null
			);
			if (GSS_error(this.maj_stat)) {
				ret = AuthStatus.error;
				goto end;
			}
			this.targetname = cast(char *)malloc(output_token.length + 1);
			strncpy(
				this.targetname, cast(char*) output_token.value, output_token.length
			);
			this.targetname[output_token.length] = 0;
		}

		ret = AuthStatus.complete;
		
	end:
		if (output_token.length) {
			gss_release_buffer(&this.min_stat, &output_token);
		}
		if (input_token.value) {
			free(input_token.value);
		}
		return ret;
	}

}


void get_gss_error(OM_uint32 err_maj, char *buf_maj, OM_uint32 err_min, char *buf_min)
{
    OM_uint32 maj_stat, min_stat;
    OM_uint32 msg_ctx = 0;
    gss_buffer_desc status_string;
    
    do {
        maj_stat = gss_display_status(
            &min_stat,
            err_maj,
            GSS_C_GSS_CODE,
            GSS_C_NO_OID,
            &msg_ctx,
            &status_string
        );
        if (GSS_error(maj_stat)) {
            break;
        }
        strncpy(buf_maj, cast(char*) status_string.value, GSS_ERRBUF_SIZE);
        gss_release_buffer(&min_stat, &status_string);
        
        maj_stat = gss_display_status(
            &min_stat,
            err_min,
            GSS_C_MECH_CODE,
            GSS_C_NULL_OID,
            &msg_ctx,
            &status_string
        );
        if (! GSS_error(maj_stat)) {
            strncpy(buf_min, cast(char*) status_string.value, GSS_ERRBUF_SIZE);
            gss_release_buffer(&min_stat, &status_string);
        }
    } while (!GSS_error(maj_stat) && msg_ctx != 0);
}

